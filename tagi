#!/bin/sh
#
prog=tagi
usage="$prog 'pattern'"
#
#	Process a tag binary pattern description on the command line,
#	and write the bit expansions to stdout.   tag calls this routine
#	automatically with its first parameter, if that parameter contains
#	other than '0's and '1's.
#
#	At present, they can have the form:
#
#	(bits)^repeat-count
#
#	e.g (100)^5 yields	100100100100100

case $# in
1)	;;
*)	echo "$usage" 1>&2
	exit 1
esac

echo "$1" |
awk '
/^[0-1][0-1]*$/ {
	print 
	exit
}

/^[0-1]*\([0-1]*\)\^[0-9][0-9]*$/ {
	prefix = $0
	sub(/\(.*$/, "", prefix)

	bits = $0
	sub(/\).*$/, "", bits)
	sub(/^.*\(/, "", bits)

	rep = $0
	sub(/^.*\^/, "", rep)

	pat = bits
	for (i=0; i<(rep - 1); i++)
		pat = pat bits
	print prefix pat
	exit }

// {
	print "'$prog': bad pattern: " $0 >>"/dev/stderr"
	exit 1
}'
